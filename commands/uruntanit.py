import discord
from discord.ext import commands
from discord import app_commands
import json
import aiohttp
import os

API_KEY = os.getenv("API_KEY")
API_URL = os.getenv("API_URL")  # √∂rnek: "https://lunasmm.net/api/v2"
ADMIN_ID = 1374472023199318077  # sadece bu ID komutu kullanabilir

class UrunTanitim(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="uruntanit", description="√úr√ºn ID'si ile √ºr√ºn bilgilerini g√∂sterir.")
    @app_commands.describe(urun_id="√úr√ºn√ºn ID'si (√∂rn: i1570)")
    async def uruntanit(self, interaction: discord.Interaction, urun_id: str):
        if interaction.user.id != ADMIN_ID:
            await interaction.response.send_message("‚ùå Bu komutu sadece yetkililer kullanabilir.", ephemeral=True)
            return

        # JSON dosyasƒ±nƒ± oku
        try:
            with open("data/bot_data.json", "r") as f:
                data = json.load(f)
        except Exception:
            await interaction.response.send_message("‚ùå √úr√ºn veritabanƒ± okunamadƒ±.", ephemeral=True)
            return

        urun = data["products"].get(urun_id)
        if not urun:
            await interaction.response.send_message("‚ùå √úr√ºn ID bulunamadƒ±.", ephemeral=True)
            return

        service_id = urun["service_id"]
        fiyat = urun["fiyat"]
        aciklama = urun.get("aciklama", "A√ßƒ±klama girilmemi≈ü.")

        # LunaSMM API'den servis bilgilerini √ßek
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(API_URL, data={
                    "key": API_KEY,
                    "action": "services"
                }) as response:
                    if response.status != 200:
                        await interaction.response.send_message("‚ùå LunaSMM API baƒülantƒ± hatasƒ±.", ephemeral=True)
                        return
                    services = await response.json()
            except Exception:
                await interaction.response.send_message("‚ùå LunaSMM API verisi alƒ±namadƒ±.", ephemeral=True)
                return

        service_info = next((s for s in services if str(s["service"]) == str(service_id)), None)
        if not service_info:
            await interaction.response.send_message("‚ùå √úr√ºn bilgileri LunaSMM'den √ßekilemedi.", ephemeral=True)
            return

        embed = discord.Embed(
            title=f"üõí √úr√ºn Tanƒ±tƒ±mƒ± ‚Äî {urun_id}",
            color=discord.Color.blurple()
        )
        embed.add_field(name="üßæ √úr√ºn Adƒ±", value=service_info["name"], inline=False)
        embed.add_field(name="üìù A√ßƒ±klama", value=aciklama, inline=False)
        embed.add_field(name="üìÅ Kategori", value=service_info.get("category", "Kategori bulunamadƒ±"), inline=False)
        embed.add_field(name="üî¢ Min - Max", value=f"{service_info['min']} - {service_info['max']}", inline=True)
        embed.add_field(name="üí∏ Fiyat", value=f"{fiyat:.2f}‚Ç∫ / 1K", inline=True)
        embed.add_field(
            name="üì¶ Sipari≈ü Nasƒ±l Verilir?",
            value="> `/siparis <√ºr√ºn_id> <adet> <link>` ≈üeklinde sipari≈ü olu≈üturabilirsiniz.",
            inline=False
        )
        embed.set_footer(text="SEA SMM")

        await interaction.response.send_message(embed=embed)

async def setup(bot):
    await bot.add_cog(UrunTanitim(bot))